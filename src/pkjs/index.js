var Clay = require('pebble-clay');
var clayConfig = require('./claylayout');
var clayFunctions = require('./clayfunctions');
var weather = require('./weather');

/* Initialize Clay. */
var clay = new Clay(clayConfig.colorLayout, clayFunctions, {autoHandleEvents: false});

/* Listen for when the watchface is opened. */
Pebble.addEventListener('ready', function(e) {
	console.log('PebbleKit JS ready!');
	weather.getWeather(); 
});

/* Open the settings page generated by Clay. */
Pebble.addEventListener('showConfiguration', function(e) {
	console.log("Opening configuration page.");
	
	if (clay.meta.activeWatchInfo.platform == 'basalt') {
    	clay.config = clayConfig.colorLayout;
	}
	else {
		clay.config = clayConfig.blackWhiteLayout;
	}
  	  
	Pebble.openURL(clay.generateUrl());
});

/* Send the settings to the watch when the configuration page is closed. */
Pebble.addEventListener('webviewclosed', function(e) {
	if (e && !e.response) {
		return;
	}
	
	/* Get the keys and values from each config item. */
	var dict = clay.getSettings(e.response);

	/* Add an indicator so the watch can tell if the message it
	receives is the settings or some other message (e.g. weather) */
	dict.SettingsMessage = 1;

	/* Send the settings values to the watch. */
	Pebble.sendAppMessage(dict, function(e) {
		console.log('Sent config data to Pebble.');
	}, function(e) {
		console.log('Failed to send config data:' + JSON.stringify(e) + '; ' + JSON.stringify(dict));
	});
});

/* Listen for when an AppMessage is received. */
Pebble.addEventListener('appmessage',function(e) {
	var dict = e.payload;
	console.log('AppMessage received: ' + JSON.stringify(dict));

	/* Check if the watch is asking for the temperature. */ 
	if (dict.hasOwnProperty('FetchTemperature')) {
		if (dict['FetchTemperature'] == 1) {
			weather.getWeather();
		}
	}
});
